package org.moson.checktx.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import org.moson.checktx.app.bean.StackBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STACK_BEAN".
*/
public class StackBeanDao extends AbstractDao<StackBean, Long> {

    public static final String TABLENAME = "STACK_BEAN";

    /**
     * Properties of entity StackBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Packagename = new Property(1, String.class, "packagename", false, "PACKAGENAME");
        public final static Property Method = new Property(2, String.class, "method", false, "METHOD");
        public final static Property StackInfo = new Property(3, String.class, "stackInfo", false, "STACK_INFO");
        public final static Property Front = new Property(4, boolean.class, "front", false, "FRONT");
        public final static Property Createtime = new Property(5, long.class, "createtime", false, "CREATETIME");
    }


    public StackBeanDao(DaoConfig config) {
        super(config);
    }
    
    public StackBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STACK_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"PACKAGENAME\" TEXT," + // 1: packagename
                "\"METHOD\" TEXT," + // 2: method
                "\"STACK_INFO\" TEXT," + // 3: stackInfo
                "\"FRONT\" INTEGER NOT NULL ," + // 4: front
                "\"CREATETIME\" INTEGER NOT NULL );"); // 5: createtime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STACK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StackBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String packagename = entity.getPackagename();
        if (packagename != null) {
            stmt.bindString(2, packagename);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(3, method);
        }
 
        String stackInfo = entity.getStackInfo();
        if (stackInfo != null) {
            stmt.bindString(4, stackInfo);
        }
        stmt.bindLong(5, entity.getFront() ? 1L: 0L);
        stmt.bindLong(6, entity.getCreatetime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StackBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String packagename = entity.getPackagename();
        if (packagename != null) {
            stmt.bindString(2, packagename);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(3, method);
        }
 
        String stackInfo = entity.getStackInfo();
        if (stackInfo != null) {
            stmt.bindString(4, stackInfo);
        }
        stmt.bindLong(5, entity.getFront() ? 1L: 0L);
        stmt.bindLong(6, entity.getCreatetime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StackBean readEntity(Cursor cursor, int offset) {
        StackBean entity = new StackBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // packagename
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // method
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // stackInfo
            cursor.getShort(offset + 4) != 0, // front
            cursor.getLong(offset + 5) // createtime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StackBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPackagename(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMethod(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStackInfo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFront(cursor.getShort(offset + 4) != 0);
        entity.setCreatetime(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StackBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StackBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StackBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
